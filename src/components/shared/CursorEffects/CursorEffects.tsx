'use client';\n\nimport React, { useEffect, useState, useRef } from 'react';\n\ninterface CursorPosition {\n  x: number;\n  y: number;\n}\n\ninterface CursorEffectsProps {\n  className?: string;\n  showTrail?: boolean;\n  showGlow?: boolean;\n  showRipples?: boolean;\n  interactive?: boolean;\n  color?: string;\n}\n\nexport function CursorEffects({\n  className = '',\n  showTrail = true,\n  showGlow = true,\n  showRipples = false,\n  interactive = true,\n  color = '#8b5cf6'\n}: CursorEffectsProps) {\n  const [mousePosition, setMousePosition] = useState<CursorPosition>({ x: 0, y: 0 });\n  const [isClicking, setIsClicking] = useState(false);\n  const [trail, setTrail] = useState<CursorPosition[]>([]);\n  const [ripples, setRipples] = useState<Array<{ x: number; y: number; id: number }>>([]);\n  const [isVisible, setIsVisible] = useState(false);\n  const animationRef = useRef<number>();\n\n  // Update mouse position\n  useEffect(() => {\n    const updateMousePosition = (e: MouseEvent) => {\n      setMousePosition({ x: e.clientX, y: e.clientY });\n      setIsVisible(true);\n    };\n\n    const handleMouseDown = () => setIsClicking(true);\n    const handleMouseUp = () => setIsClicking(false);\n    \n    const handleMouseLeave = () => setIsVisible(false);\n    const handleMouseEnter = () => setIsVisible(true);\n\n    window.addEventListener('mousemove', updateMousePosition);\n    window.addEventListener('mousedown', handleMouseDown);\n    window.addEventListener('mouseup', handleMouseUp);\n    document.addEventListener('mouseleave', handleMouseLeave);\n    document.addEventListener('mouseenter', handleMouseEnter);\n\n    return () => {\n      window.removeEventListener('mousemove', updateMousePosition);\n      window.removeEventListener('mousedown', handleMouseDown);\n      window.removeEventListener('mouseup', handleMouseUp);\n      document.removeEventListener('mouseleave', handleMouseLeave);\n      document.removeEventListener('mouseenter', handleMouseEnter);\n    };\n  }, []);\n\n  // Create ripple on click\n  useEffect(() => {\n    const handleClick = (e: MouseEvent) => {\n      if (showRipples) {\n        const newRipple = {\n          x: e.clientX,\n          y: e.clientY,\n          id: Date.now()\n        };\n        \n        setRipples(prev => [...prev, newRipple]);\n        \n        // Remove ripple after animation\n        setTimeout(() => {\n          setRipples(prev => prev.filter(ripple => ripple.id !== newRipple.id));\n        }, 800);\n      }\n    };\n\n    if (showRipples) {\n      window.addEventListener('click', handleClick);\n      return () => window.removeEventListener('click', handleClick);\n    }\n  }, [showRipples]);\n\n  // Update trail\n  useEffect(() => {\n    if (showTrail) {\n      const updateTrail = () => {\n        setTrail(prev => {\n          const newTrail = [mousePosition, ...prev].slice(0, 20);\n          return newTrail;\n        });\n      };\n\n      animationRef.current = requestAnimationFrame(updateTrail);\n      return () => {\n        if (animationRef.current) {\n          cancelAnimationFrame(animationRef.current);\n        }\n      };\n    }\n  }, [mousePosition, showTrail]);\n\n  // Don't render on touch devices\n  useEffect(() => {\n    const isTouchDevice = 'ontouchstart' in window || navigator.maxTouchPoints > 0;\n    if (isTouchDevice) {\n      setIsVisible(false);\n    }\n  }, []);\n\n  if (!isVisible) return null;\n\n  return (\n    <div \n      className={`fixed inset-0 pointer-events-none z-50 ${className}`}\n      style={{ mixBlendMode: 'difference' }}\n    >\n      {/* Main cursor glow */}\n      {showGlow && (\n        <div\n          className=\"absolute w-8 h-8 rounded-full transition-transform duration-150 ease-out\"\n          style={{\n            left: mousePosition.x - 16,\n            top: mousePosition.y - 16,\n            background: `radial-gradient(circle, ${color}40 0%, ${color}20 50%, transparent 100%)`,\n            transform: isClicking ? 'scale(1.5)' : 'scale(1)',\n            boxShadow: `0 0 20px ${color}60, 0 0 40px ${color}30`\n          }}\n        />\n      )}\n\n      {/* Cursor trail */}\n      {showTrail && trail.map((position, index) => {\n        const opacity = (1 - index / trail.length) * 0.6;\n        const size = (1 - index / trail.length) * 12;\n        \n        return (\n          <div\n            key={index}\n            className=\"absolute rounded-full transition-opacity duration-150\"\n            style={{\n              left: position.x - size / 2,\n              top: position.y - size / 2,\n              width: size,\n              height: size,\n              background: color,\n              opacity: opacity,\n              transform: `scale(${1 - index / trail.length})`,\n              pointerEvents: 'none'\n            }}\n          />\n        );\n      })}\n\n      {/* Click ripples */}\n      {showRipples && ripples.map((ripple) => (\n        <div\n          key={ripple.id}\n          className=\"absolute rounded-full animate-ping\"\n          style={{\n            left: ripple.x - 20,\n            top: ripple.y - 20,\n            width: 40,\n            height: 40,\n            border: `2px solid ${color}`,\n            animationDuration: '800ms'\n          }}\n        />\n      ))}\n    </div>\n  );\n}\n\n// Hook for magnetic cursor interaction\nexport function useMagneticCursor(strength: number = 0.3) {\n  const elementRef = useRef<HTMLElement>(null);\n  const [cursorVariant, setCursorVariant] = useState<'default' | 'hover' | 'click'>('default');\n\n  useEffect(() => {\n    const element = elementRef.current;\n    if (!element) return;\n\n    const handleMouseEnter = () => {\n      setCursorVariant('hover');\n      document.body.style.cursor = 'none';\n    };\n\n    const handleMouseLeave = () => {\n      setCursorVariant('default');\n      document.body.style.cursor = 'auto';\n      element.style.transform = 'translate(0px, 0px)';\n    };\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const rect = element.getBoundingClientRect();\n      const centerX = rect.left + rect.width / 2;\n      const centerY = rect.top + rect.height / 2;\n      \n      const deltaX = (e.clientX - centerX) * strength;\n      const deltaY = (e.clientY - centerY) * strength;\n\n      element.style.transform = `translate(${deltaX}px, ${deltaY}px)`;\n    };\n\n    const handleMouseDown = () => setCursorVariant('click');\n    const handleMouseUp = () => setCursorVariant('hover');\n\n    element.addEventListener('mouseenter', handleMouseEnter);\n    element.addEventListener('mouseleave', handleMouseLeave);\n    element.addEventListener('mousemove', handleMouseMove);\n    element.addEventListener('mousedown', handleMouseDown);\n    element.addEventListener('mouseup', handleMouseUp);\n\n    return () => {\n      element.removeEventListener('mouseenter', handleMouseEnter);\n      element.removeEventListener('mouseleave', handleMouseLeave);\n      element.removeEventListener('mousemove', handleMouseMove);\n      element.removeEventListener('mousedown', handleMouseDown);\n      element.removeEventListener('mouseup', handleMouseUp);\n      document.body.style.cursor = 'auto';\n    };\n  }, [strength]);\n\n  return { elementRef, cursorVariant };\n}\n\n// Enhanced cursor for interactive elements\ninterface MagneticElementProps {\n  children: React.ReactNode;\n  strength?: number;\n  className?: string;\n  scale?: number;\n}\n\nexport function MagneticElement({\n  children,\n  strength = 0.3,\n  className = '',\n  scale = 1.05\n}: MagneticElementProps) {\n  const { elementRef, cursorVariant } = useMagneticCursor(strength);\n\n  return (\n    <div\n      ref={elementRef}\n      className={`magnetic-element transition-transform duration-200 ease-out ${className}`}\n      style={{\n        transformOrigin: 'center',\n        transform: cursorVariant === 'hover' ? `scale(${scale})` : 'scale(1)'\n      }}\n    >\n      {children}\n    </div>\n  );\n}\n\n// Cursor styles for different contexts\nexport const CursorVariants = {\n  default: {\n    showTrail: true,\n    showGlow: true,\n    showRipples: false,\n    color: '#8b5cf6'\n  },\n  minimal: {\n    showTrail: false,\n    showGlow: true,\n    showRipples: false,\n    color: '#6b7280'\n  },\n  interactive: {\n    showTrail: true,\n    showGlow: true,\n    showRipples: true,\n    color: '#06b6d4'\n  },\n  gaming: {\n    showTrail: true,\n    showGlow: true,\n    showRipples: true,\n    color: '#ff007a'\n  }\n};